version: '3.8'

services:
  mongo:
    image: mongo:6
    restart: always
    volumes:
      - mongo_data:/data/db
    networks:
      - app-network
  postgres:
    image: postgres:14-alpine
    restart: always
    environment:
      POSTGRES_DB: globegenius
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    restart: always
    volumes:
      - redis_data:/data
    command: redis-server --appendonly no
    networks:
      - app-network

  backend:
    build: ./backend
    restart: always
    depends_on:
      - postgres
      - redis
      - mongo
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://admin:${DB_PASSWORD}@postgres:5432/globegenius
      - REDIS_URL=redis://redis:6379
      - MONGODB_URI=mongodb://mongo:27017/globegenius
      - JWT_SECRET=${JWT_SECRET}
      - FLIGHTAPI_KEY=${FLIGHTAPI_KEY}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - SENDGRID_FROM_EMAIL=${SENDGRID_FROM_EMAIL}
      - ADMIN_EMAILS=${ADMIN_EMAILS:-admin@globegenius.app}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - ENABLE_SCANNER=true
    ports:
      - "3001:3001"
    networks:
      - app-network

  frontend:
    build: ./frontend
    restart: always
    depends_on:
      - backend
    ports:
      - "3000:3000"
    networks:
      - app-network

  ml-service:
    build: ./ml-service
    restart: always
    depends_on:
      - redis
    environment:
      - REDIS_URL=redis://redis:6379
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  mongo_data: